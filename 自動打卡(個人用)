import tkinter as tk
from tkinter import messagebox
from playwright.sync_api import sync_playwright, TimeoutError
from datetime import datetime
import time

# 获取系统日期
def get_today_date():
    return datetime.now().strftime("%Y-%m-%d")  # 格式化为 'YYYY-MM-DD'

# 登录并进行打卡操作的函数
def login_and_punch_in_or_out(action):
    try:
        with sync_playwright() as p:
            # 启动 Chromium 浏览器
            browser = p.chromium.launch(headless=False)  # headless=False 让浏览器可见
            page = browser.new_page()

            # 打开登录页面
            page.goto("")

            # 填写账号和密码
            page.fill("#username", "")  # 替换成你的用户名
            page.fill("#password", "")  # 替换成你的密码

            # 点击登录按钮
            page.click("button[type='submit']")
            # 等待模态框加载
            page.wait_for_selector('#ReadBulletinModal', state='visible')

            # 判断模态框是否可见
            if page.is_visible("#ReadBulletinModal"):
                # 点击关闭按钮
                close_button = page.locator("#ReadBulletinModal").locator("button.btn.btn-secondary:has-text('关闭')")
                close_button.click()

                # 确认模态框已被隐藏
                page.wait_for_selector("#ReadBulletinModal", state="hidden")
                print("模态框已成功关闭")
            else:
                print("模态框不存在或已关闭")

            # 获取表格内容
            today_date = get_today_date()

            # 定义 row_locator，选取包含今天日期的表格行
            row_locator = page.locator(f"table tbody tr:has(td:text-is('{today_date}'))")

            punch_in_time_locator = row_locator.locator("td:nth-child(2)")  # 第二列：签到时间
            punch_out_time_locator = row_locator.locator("td:nth-child(3)")  # 第三列：签退时间

            punch_in_time = (
                punch_in_time_locator.inner_text().strip() if punch_in_time_locator.count() > 0 else None
                )
            punch_out_time = (
                punch_out_time_locator.inner_text().strip() if punch_out_time_locator.count() > 0 else None
            )

            if action == "上班签到":
                if punch_in_time:
                    messagebox.showinfo("已签到", f"今天已签到，签到时间：{punch_in_time}")
                    print("上班已簽到過")
                else:
                    page.click("#work_btn")  # 执行上班签到
                    # 等待模态框加载
                    page.wait_for_selector('#ConfirmModal', state='visible')

                    # 判断模态框是否可见
                    if page.is_visible("#ConfirmModal"):
                        # 点击按钮
                        close_button = page.locator("#ConfirmModal").locator("button.btn-confirm.btn-primary:has-text('确认')")
                        close_button.click()

                        # 确认模态框已被隐藏
                        page.wait_for_selector("#ConfirmModal", state="hidden")
                        print("模态框已成功关闭")
                    else:
                        print("模态框不存在或已关闭")
                    time.sleep(2)  # 等待页面更新
                    punch_in_time = punch_in_time_locator.inner_text().strip()  # 获取更新后的签到时间
                    messagebox.showinfo("成功", f"上班签到成功，签到时间：{punch_in_time}")
                    print(f"上班签到成功，时间：{punch_in_time}")

            elif action == "下班签退":
                if punch_out_time:
                    messagebox.showinfo("已签退", f"今天已签退，签退时间：{punch_out_time}")
                    print("下班已签退过")
                else:
                    page.click("#off_work_btn")  # 执行下班签退
                    
                    # 等待模态框加载
                    page.wait_for_selector('#ConfirmModal', state='visible')

                    # 判断模态框是否可见
                    if page.is_visible("#ConfirmModal"):
                        # 点击按钮
                        close_button = page.locator("#ConfirmModal").locator("button.btn-confirm.btn-primary:has-text('确认')")
                        close_button.click()

                        # 确认模态框已被隐藏
                        page.wait_for_selector("#ConfirmModal", state="hidden")
                        print("模态框已成功关闭")
                    else:
                        print("模态框不存在或已关闭")
                    time.sleep(2)  # 等待页面更新
                    punch_out_time = punch_out_time_locator.inner_text().strip()  # 获取更新后的签退时间
                    messagebox.showinfo("成功", f"下班签退成功，签退时间：{punch_out_time}")
                    print(f"下班签退成功，时间：{punch_out_time}")

                # 打印当天的签到和签退时间
                print(f"今日签到时间: {punch_in_time}, 签退时间: {punch_out_time}")

            # 关闭浏览器
            browser.close()

    except TimeoutError:
        messagebox.showerror("错误", "页面加载超时，请检查网络连接。")
    except Exception as e:
        messagebox.showerror("错误", f"发生未知错误：{e}")

# 主程序部分：UI 界面
def on_button_click(action):
    try:
        # 调用登录和打卡函数
        login_and_punch_in_or_out(action)
    except Exception as e:
        messagebox.showerror("错误", f"发生错误：{e}")

# 创建主窗口
root = tk.Tk()
root.title("打卡系统")
root.geometry("300x200")

# 创建按钮
work_button = tk.Button(root, text="上班签到", command=lambda: on_button_click("上班签到"))
work_button.pack(pady=20)

off_button = tk.Button(root, text="下班签退", command=lambda: on_button_click("下班签退"))
off_button.pack(pady=20)

# 进入主循环
root.mainloop()
