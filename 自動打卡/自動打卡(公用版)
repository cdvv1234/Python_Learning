import tkinter as tk
from tkinter import messagebox
from playwright.sync_api import sync_playwright, TimeoutError
from datetime import datetime
import json
import os
import time

# 存储用户数据的文件名
USER_DATA_FILE = "user_data.json"

# 获取系统日期
def get_today_date():
    return datetime.now().strftime("%Y-%m-%d")  # 格式化为 'YYYY-MM-DD'

# 加载用户数据
def load_user_data():
    if os.path.exists(USER_DATA_FILE):
        with open(USER_DATA_FILE, "r") as file:
            return json.load(file)
    return {"username": "", "password": ""}

# 保存用户数据
def save_user_data(username, password):
    with open(USER_DATA_FILE, "w") as file:
        json.dump({"username": username, "password": password}, file)

# 登录并进行打卡操作的函数
def login_and_punch_in_or_out(action, username, password):
    if not username or not password:
        messagebox.showerror("錯誤", "帳號或密碼不能為空，請輸入完整訊息！")
        return

    try:
        with sync_playwright() as p:
            # 启动 Chromium 浏览器
            browser = p.chromium.launch(headless=False)  # headless=False 让浏览器可见
            page = browser.new_page()

            # 打开登录页面
            page.goto("")

            # 填写账号和密码
            page.fill("#username", username)
            page.fill("#password", password)

            # 点击登录按钮
            page.click("button[type='submit']")
            # 等待模态框加载
            page.wait_for_selector('#ReadBulletinModal', state='visible')

            # 判断模态框是否可见
            if page.is_visible("#ReadBulletinModal"):
                close_button = page.locator("#ReadBulletinModal").locator("button.btn.btn-secondary:has-text('关闭')")
                close_button.click()
                page.wait_for_selector("#ReadBulletinModal", state="hidden")
                print("模态框已成功关闭")
            else:
                print("模态框不存在或已关闭")

            # 获取表格内容
            today_date = get_today_date()
            row_locator = page.locator(f"table tbody tr:has(td:text-is('{today_date}'))")
            punch_in_time_locator = row_locator.locator("td:nth-child(2)")  # 第二列：签到时间
            punch_out_time_locator = row_locator.locator("td:nth-child(3)")  # 第三列：签退时间

            punch_in_time = (
                punch_in_time_locator.inner_text().strip() if punch_in_time_locator.count() > 0 else None
            )
            punch_out_time = (
                punch_out_time_locator.inner_text().strip() if punch_out_time_locator.count() > 0 else None
            )

            if action == "上班签到":
                if punch_in_time:
                    messagebox.showinfo("已簽到", f"今天已簽到，簽到時間：{punch_in_time}")
                else:
                    page.click("#work_btn")  # 执行上班签到
                    page.wait_for_selector('#ConfirmModal', state='visible')
                    if page.is_visible("#ConfirmModal"):
                        close_button = page.locator("#ConfirmModal").locator("button.btn-confirm.btn-primary:has-text('确认')")
                        close_button.click()
                        page.wait_for_selector("#ConfirmModal", state="hidden")
                    time.sleep(2)  # 等待页面更新
                    punch_in_time = punch_in_time_locator.inner_text().strip()  # 获取更新后的签到时间
                    messagebox.showinfo("成功", f"上班簽到成功，簽到時間：{punch_in_time}")

            elif action == "下班签退":
                if punch_out_time:
                    messagebox.showinfo("已簽退", f"今天已簽退，簽退時間：{punch_out_time}")
                else:
                    page.click("#off_work_btn")  # 执行下班签退
                    page.wait_for_selector('#ConfirmModal', state='visible')
                    if page.is_visible("#ConfirmModal"):
                        close_button = page.locator("#ConfirmModal").locator("button.btn-confirm.btn-primary:has-text('确认')")
                        close_button.click()
                        page.wait_for_selector("#ConfirmModal", state="hidden")
                    time.sleep(2)  # 等待页面更新
                    punch_out_time = punch_out_time_locator.inner_text().strip()  # 获取更新后的签退时间
                    messagebox.showinfo("成功", f"下班簽退成功，簽退時間：{punch_out_time}")

            # 关闭浏览器
            browser.close()

    except TimeoutError:
        messagebox.showerror("錯誤", "页面加载超时，请检查网络连接。")
    except Exception as e:
        messagebox.showerror("錯誤", f"发生未知错误：{e}")

# 主程序部分：UI 界面
def on_button_click(action):
    username = username_entry.get().strip()
    password = password_entry.get().strip()
    save_user_data(username, password)  # 保存用户输入的账号和密码
    try:
        login_and_punch_in_or_out(action, username, password)
    except Exception as e:
        messagebox.showerror("错误", f"发生错误：{e}")

# 创建主窗口
root = tk.Tk()
root.title("打卡系统")
root.geometry("300x250")

# 加载本地存储的账号和密码
user_data = load_user_data()
default_username = user_data.get("username", "")
default_password = user_data.get("password", "")

# 创建一个容器框架
main_frame = tk.Frame(root)
main_frame.pack(expand=True)  # 使主框架居中

# 加载本地存储的账号和密码
user_data = load_user_data()
default_username = user_data.get("username", "")
default_password = user_data.get("password", "")

# 创建账号行
account_frame = tk.Frame(main_frame)
account_frame.pack(pady=5)
tk.Label(account_frame, text="帳號：").pack(side="left")
username_entry = tk.Entry(account_frame)
username_entry.insert(0, default_username)
username_entry.pack(side="left")

# 创建密码行
password_frame = tk.Frame(main_frame)
password_frame.pack(pady=5)
tk.Label(password_frame, text="密碼：").pack(side="left")
password_entry = tk.Entry(password_frame)
password_entry.insert(0, default_password)
password_entry.pack(side="left")

# 创建一个横向容器
button_frame = tk.Frame(main_frame)
button_frame.pack(pady=20)

# 创建按钮
work_button = tk.Button(button_frame, text="上班簽到", width=12, command=lambda: on_button_click("上班签到"))
work_button.pack(side="left", padx=5)

off_button = tk.Button(button_frame, text="下班簽退", width=12, command=lambda: on_button_click("下班签退"))
off_button.pack(side="left", padx=5)

# 进入主循环
root.mainloop()
